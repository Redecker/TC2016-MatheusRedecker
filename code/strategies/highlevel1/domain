(defdomain ahtn
    (
        (:operator (!build-base ?worker ?recursoBase)
                    ((worker ?worker) (have ?recursoBase))
                    ((have ?recursoBase))
                    ((base ?base))
        )

        (:operator (!train-worker ?base ?recursoworker)
                    ((base ?base) (have ?recursoworker))
                    ((have ?recursoworker))
                    ((worker ?worker))
        )

        (:operator (!build-barrack ?worker ?recursoQuartel)
                    ((worker ?worker) (have ?recursoQuartel))
                    ((have ?recursoQuartel))
                    ((quartel ?quartel))
        )

        (:operator (!train-ranged ?quartel ?recursoRanged)
                    ((quartel ?quartel) (have ?recursoRanged))
                    ((have ?recursoRanged))
                    ((ranged ?ranged))
        )

        (:operator (!get-resource ?worker ?base ?recurso)
                    ((worker ?worker) (base ?base))
                    ()
                    ((have ?recurso))
        )

        (:operator (!attack-ranged ?ranged)
                    ((ranged ?ranged))
                    ()
                    ()
        )

        (:method (construir-base ?base)
                ((not (base ?base)) (recurso ?base ?recursoBase) (have ?recursoBase) (worker ?worker))
                ((!build-base ?worker ?recursoBase))
        )

        (:method (treinar-worker ?worker)
                ((not (worker ?worker)) (recurso ?worker ?recursoWorker) (have ?recursoWorker) (base ?base))
                ((!train-worker ?base ?recursoWorker))
        )

        (:method (construir-quartel ?quartel)
                ;caso simples nÃ£o tenho quartel e tenho recurso e worker -> somente constroi
                ((not (quartel ?quartel)) (recurso ?quartel ?recursoQuartel) (have ?recursoQuartel) (worker ?worker)) 
                ((!build-barrack ?worker ?recursoQuartel))

                ;nao tem recurso para o quartel -> consegue recurso e constroi
                ((not (quartel ?quartel)) (recurso ?quartel ?recursoQuartel) (not (have ?recursoQuartel)) (worker ?worker) (base ?base))
                ((!get-resource ?worker ?base ?recursoQuartel) (construir-quartel ?quartel))
                
                ;nao tem worker mas tenho base e recurso para construir -> consegue um worker e tenta denovo 
                ((not (quartel ?quartel)) (not (worker ?worker)) (base ?base))
                ((treinar-worker ?worker) (construir-quartel ?quartel))
                
                ;nao tenho base mas tenho worker e recurso pra base
                ((not (quartel ?quartel)) (not (base ?base)) (worker ?worker))
                ((construir-base ?base) (construir-quartel ?quartel))
        )

        (:method (treinar-ranged ?ranged)
                ;caso nao tenha quartel
                ((not (quartel ?quartel)))
                ((construir-quartel ?quartel) (treinar-ranged ?ranged))

                ;caso nao tenha recurso para unidade
                ((quartel ?quartel) (recurso ?ranged ?recursoRanged) (not (have ?recursoRanged)) (worker ?worker) (base ?base))
                ((!get-resource ?worker ?base ?recursoRanged) (treinar-ranged ?ranged))

                ;caso simples tenho quartel e recurso -> treina ranged
                ((quartel ?quartel) (recurso ?ranged ?recursoRanged))
                ((!train-ranged ?quartel ?recursoRanged))
        )

        (:method (ataque-ranged ?ranged)

                ;nao tenho ranged mando fazer e ataca
                ((not (ranged ?ranged)))
                ((treinar-ranged ?ranged) (ataque-ranged ?ranged))

                ;caso base tenho um ranged mando atacar
                ((ranged ?ranged))
                ((!attack-ranged ?ranged))
        )        
    )
)
